<?php
// $Id: $

/**
 *
 *  @file
 *  Product import functionality for Topspin CCK module.
 *
 */


include_once('topspin_cck.admin.inc');


/**
 *  Implementation of hook_perm().
 */
function topspin_cck_perm() {
  return array(
    'manage topspin content'
  );
}


/**
 *  Implementation of hook_menu().
 */
function topspin_cck_menu() {
  $items = array();
  
  $items['admin/content/topspin'] = array(
    'title' => 'TopSpin content',
    'description' => 'Manage imported TopSpin content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('topspin_cck_content_form'),
    'access arguments' => array('manage topspin content'),
  );
  
  return $items;
}


/**
 * Implementation of hook_cron().
 */
function topspin_cck_cron() {
  // Import products if configuration allows.
  if (variable_get('topspin_cck_import_on_cron', 1)) {
    topspin_cck_import_offers();
  }
}


/**
 * Implementation of hook_nodeapi().
 */
function topspin_cck_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      if ($node->type == 'topspin_product') {
        // When a TopSpin product node is removed, get rid of entry in {topspin_offer}.
        db_query("DELETE FROM {topspin_offer} WHERE nid = %d", array($node->nid));
      }
      break;
  }
}


/**
 * Implementation of hook_form_alter().
 */
function topspin_cck_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'topspin_product_node_form':
      // Add a Revert button for TopSpin imports.
      // Make sure this is an actual import and not a manually created topspin_product.
      if (topspin_cck_node_get_offer_id($form['nid']['#value'])) {
        $topspin_revert = array(
          '#type' => 'submit',
          '#value' => 'Revert',
          '#weight' => 20,
          '#submit' => array(
            'topspin_cck_node_revert_submit',
          ),
        );
        $form['buttons']['topspin_revert'] = $topspin_revert;
      }
      break;
  }
  // Include admin form_alter stuff.
  _topspin_cck_admin_form_alter($form, $form_state, $form_id);
}


/**
 * TopSpin node revert handler.
 *
 * @param array $form
 * @param array $form_state
 */
function topspin_cck_node_revert_submit($form, &$form_state) {
  // Revert this node only.
  topspin_cck_import_offers(TRUE, $form['nid']['#value']);
}


/**
 * Helper function to retrieve a node's offer_id.
 *
 * @param int $nid
 * @return int $offer_id
 */
function topspin_cck_node_get_offer_id($nid) {
  return db_result(db_query("SELECT oid FROM {topspin_offer} WHERE nid = %d", $nid));
}


/**
 * Import Topspin offers and map to nodes.
 */
function topspin_cck_import_offers($override = NULL, $update_nid = NULL) {
  
  // Get offers.
  $params = array();
  $artist_id = variable_get('topspin_api_artist_id', NULL);
  if ($artist_id) {
    $params['artist_id'] = $artist_id;
  }
  
  $offers = topspin_request('offers', $params);
  
  if (!isset($offers->offers)) {
    if (is_array($offers)) {
      $fail = 'Retrieval error: '. $offers['error'];
    } else {
      $fail = 'Unable to retrieve Offers';
    }
    drupal_set_message($fail);
    return;
  }
  
  $create_count = 0;
  $update_count = 0;
  
  $curpage = $offers->current_page;
  while ($curpage < $offers->total_pages) {
    $curpage++;
    $params['page'] = $curpage;
    $this_offer = topspin_request('offers', $params);
    $offers->offers = array_merge($offers->offers, $this_offer->offers);
  }
  
  // If we have a single node to update, get the offer id before we start looping.
  if ($update_nid) {
    $update_offer_id = topspin_cck_node_get_offer_id($update_nid);
  }
  
  // Loop through orders and add/update.
  foreach ($offers->offers as $offer_index => $offer) {
    if ($update_nid) {
      // We have an individual node to update, only save the one.
      if ($update_offer_id && $update_offer_id == (int) $offer->id) {
        $action = topspin_cck_offer_save_node($offer, $override);
        if ($action == 2) {
          $update_count++;
        }
        break;
      }
    } else {
      // Save 'em all.
      $action = topspin_cck_offer_save_node($offer, $override);
      switch($action) {
        case 1:
          $create_count++;
          break;
        case 2:
          $update_count++;
          break;
      }
    }
  }
  
  $import_message = '';
  if ($create_count) {
    $import_message .= $create_count .' TopSpin product node(s) created.';
  }
  if ($update_count) {
    $import_message .= $update_count .' TopSpin product node(s) updated.';
  }
  if (empty($import_message)) {
    $import_message = 'No TopSpin content created or updated.';
  }
  drupal_set_message($import_message);
  
}


/**
 * Helper function for saving an offer as a node.
 *
 * @param object $offer
 * @param boolean $override
 */
function topspin_cck_offer_save_node($offer, $override = NULL) {
  $offer_id = (int) $offer->id;
  $existing_nid = db_result(db_query("SELECT nid FROM {topspin_offer} WHERE oid = %d", array($offer_id)));
  if (!$existing_nid || $override) {
    // New Offer, create a new node or update existing.
    $updating = 0;
    $creating = 1;
    
    if ($override && $existing_nid) {
      $updating = 1;
      $creating = 0;
    }
    
    // Node basics.
    if ($updating) {
      $node = node_load($existing_nid);
    } else {
      $node = (object) array(
        'type' => 'topspin_product',
        'uid' => $GLOBALS['user']->uid,
        'status' => (int) !variable_get('topspin_cck_unpublish_on_import', 1),
      );
    }
    
    // Title field.
    $node->title = $offer->campaign->product->name;
    
    // Body field.
    $node->body = $offer->campaign->product->description;
    
    // Embed Code field.
    $node->field_topspin_buy_embed[0]['value'] = $offer->embed_code;
    $node->field_topspin_buy_embed[0]['format'] = 2;
    
    // Price field.
    $node->field_topspin_price[0]['value'] = '$'. $offer->price;
    
    // Image field.
    if ($offer->poster_image) {
      $file = NULL;
      if ($updating) {
        // Check if a file obj already exists - if so, just update existing.
        if (isset($node->field_topspin_image[0]['fid'])) {
          $file = $node->field_topspin_image[0];
        }
      }
      $file = topspin_cck_process_image($offer->poster_image, $file);
      $node->field_topspin_image[0] = (array) $file;
    }
    
    // Associate offer_id, could be useful later.
    // TODO: doesn't seem to be saving...
    $node->topspin_offer_id = $offer->id;
    
    // Save it!
    node_save($node);
    
    // Add Order to {orders_topspin}.
    if ($updating) {
      db_query("UPDATE {topspin_offer} SET data = '%s', changed = %d WHERE nid = %d", array(serialize($offer), time(), $node->nid));
    } else {
      db_query("INSERT INTO {topspin_offer} (oid, nid, data, changed, created) VALUES(%d, %d, '%s', %d, %d)", array($offer_id, $node->nid, serialize($offer), time(), time()));
    }
    
  }
  
  if ($creating) {
    $ret = 1;
  } else if ($updating) {
    $ret = 2;
  } else {
    $ret = 0;
  }
  
  return $ret;
}


/**
 * Download a remote image, move to /files dir, and save {files} entry.
 *
 * @param string $remote_path
 * @return object $file
 */
function topspin_cck_process_image($remote_path, $existing_file = NULL) {
  // Save remote data to files dir.
  $filepath = file_save_data(file_get_contents($remote_path), file_directory_path(), FILE_EXISTS_REPLACE);
  // Parse url so we can remove query string.
  $path_parts = parse_url($remote_path);
  $nice_name = basename($path_parts['path']);
  // Fill basic info.
  $file = (object) array(
    'filepath' => $filepath,
    'uid' => $GLOBALS['user']->uid,
    'filesize' => filesize($filepath),
    'filemime' =>  file_get_mimetype($nice_name),
    'status' => 1,
    'timestamp' => time(),
    'list' => 1,
  );
  // Rename using nice name.
  file_move($file, file_directory_path() .'/'. $nice_name, FILE_EXISTS_REPLACE);
  // Save file to {files} table.
  $update_fields = array();
  if ($existing_file) {
    $file->fid = $existing_file['fid'];
    $update_fields[] = 'fid';
  }
  $ret = drupal_write_record('files', $file, $update_fields);
  
  return $file;
}

